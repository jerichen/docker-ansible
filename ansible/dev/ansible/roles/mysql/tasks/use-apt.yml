- name: debug
  debug:
    msg:
      "{{ ansible_distribution }}"

- name: Add the OS specific variables
  include_vars: "{{ ansible_distribution }}.yml"
#  include_vars:  "{{ ansible_os_family }}.yml"

- name: Install MySQL server apt packages
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items:
    "{{ mysql_packages }}"
  when:
    mysql_packages is defined

- name: Copy the my.cnf file
  template:
    src: "{{ ansible_distribution }}-my.cnf.j2"
    dest: "{{ mysql_conf_dir }}/my.cnf"
    owner: root
    group: root
    mode: 0640
  notify:
    - restarted MySQL

- name: Create the directory /etc/mysql/conf.d
  file:
    path: "/etc/mysql/conf.d"
    state: directory
  notify:
    - restarted MySQL

- name: Force start of mysql service.
  command: service mysql start

- name: update mysql root password for all root accounts
  mysql_user:
    name: root
    host: "{{ item }}"
    password: "{{ mysql_root_password }}"
  with_items:
    - "{{ ansible_hostname }}"
    - 127.0.0.1
    - ::1
    - localhost
  when: ansible_hostname != 'localhost'

- name: update mysql root password for all root accounts
  mysql_user:
    name: root
    host: "{{ item }}"
    password: "{{ mysql_root_password }}"
  with_items:
    - 127.0.0.1
    - ::1
    - localhost
  when: ansible_hostname == 'localhost'

- name: copy .my.cnf file with root password credentials
  template:
    src: "root-my.cnf.j2"
    dest: "{{ mysql_root_home }}/.my.cnf"
    owner: "{{ mysql_root_name }}"
    mode: 0600
  notify:
    - restarted MySQL

- name: copy .my.cnf file with root password credentials
  template:
    src: "user-my.cnf.j2"
    dest: "{{ mysql_user_home }}/.my.cnf"
    owner: "{{ mysql_user_name }}"
    mode: 0600
  notify:
    - restarted MySQL

- name: remove the test database
  mysql_db:
    name: test
    state: absent

- name: Create the database's
  mysql_db:
    name: "{{ item.name }}"
    state: present
  with_items:
    - "{{ mysql_database }}"
  when:
    mysql_database|lower() != 'none'

- name: Create the database users
  mysql_user:
    name: "{{ item.name }}"
    password: "{{ item.pass|default('password') }}"
    priv: "{{ item.priv|default('*.*:ALL,GRANT') }}"
    state: present
    host: "{{ item.host|default('localhost') }}"
  with_items:
    - "{{ mysql_users }}"
  when:
    mysql_users|lower() != 'none'
  notify:
    - restarted MySQL

- name: Create the replication users
  mysql_user:
    name: "{{ item.name }}"
    password: "{{ item.pass|default('password') }}"
    priv: "{{ item.priv|default('*.*:REPLICATION SLAVE') }}"
    state: present
    host: "{{ item.host|default('localhost') }}"
  with_items:
    - "{{ mysql_repl_users }}"
  when:
    mysql_repl_role == 'master'
  notify:
    - restarted MySQL
