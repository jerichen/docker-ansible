- name: Add the OS specific variables
  include_vars: "{{ ansible_distribution }}.yml"

- name: Install MySQL server apt packages
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items:
    "{{ mysql_packages }}"
  when:
    mysql_packages is defined
  notify:
    - restarted MySQL

- name: Copy the my.cnf file
  template:
    src: "my.cnf.j2"
    dest: "{{ mysql_conf_dir }}/my.cnf"
    owner: "{{ mysql_user_name }}"
    group: "{{ mysql_user_name }}"
    mode: 0644
  notify:
    - restarted MySQL

- name: Create the directory /etc/mysql/conf.d
  file:
    path: "/etc/mysql/conf.d"
    state: directory
  notify:
    - restarted MySQL

- name: update mysql root password for all root accounts
  mysql_user:
    name: root
    host: "{{ item }}"
    password: "{{ mysql_root_password }}"
  with_items:
    - "{{ ansible_hostname }}"
    - 127.0.0.1
    - ::1
    - localhost
  when: ansible_hostname != 'localhost'

- name: update mysql root password for all root accounts
  mysql_user:
    name: root
    host: "{{ item }}"
    password: "{{ mysql_root_password }}"
  with_items:
    - 127.0.0.1
    - ::1
    - localhost
  when: ansible_hostname == 'localhost'

- name: copy .my.cnf file with root password credentials
  template:
    src: "root-my.cnf.j2"
    dest: "{{ mysql_root_home }}/.my.cnf"
    owner: root
    group: root
    mode: 0600

- name: copy .my.cnf file with root password credentials
  template:
    src: "user-my.cnf.j2"
    dest: "{{ mysql_user_home }}/.my.cnf"
    owner: "{{ mysql_user_name }}"
    mode: 0600

#- name: Install the mysql packages in Debian derivatives
#  apt: name={{ item }} state=present update_cache=yes
#  with_items:
#    - "{{ mysql_pkgs }}"
#  when: ansible_os_family == 'Debian'

#- name: Copy the my.cnf file
#  template: src=my.cnf.{{ ansible_os_family }}.j2 dest={{ mysql_conf_dir }}/my.cnf
#  notify:
#    - restarted MySQL

#- name: Create the directory /etc/mysql/conf.d
#  file: path=/etc/mysql/conf.d state=directory
#  notify:
#    - restarted MySQL

#- name: started MySQL
#  service:
#    name: mysql
#    state: started
#    enabled: yes

#- name: Start the mysql services
#  service: name={{ mysql_service }} state=started enabled=yes
#
#- name: Force start of mysql service.
#  command: service mysql start

#- name: update mysql root password for all root accounts
#  mysql_user: name=root host={{ item }} password={{ mysql_root_password }}
#  with_items:
#    - "{{ ansible_hostname }}"
#    - 127.0.0.1
#    - ::1
#    - localhost
#  when: ansible_hostname != 'localhost'
#
#- name: update mysql root password for all root accounts
#  mysql_user: name=root host={{ item }} password={{ mysql_root_password }}
#  with_items:
#    - 127.0.0.1
#    - ::1
#    - localhost
#  when: ansible_hostname == 'localhost'

#- name: copy .my.cnf file with root password credentials
#  template: src=root-my.cnf.j2 dest=~/.my.cnf mode=0600
#
#- name: copy .my.cnf file with root password credentials
#  template: src=root-my.cnf.j2 dest=~/.my.cnf mode=0600

- name: remove the test database
  mysql_db: name=test state=absent

- name: Create the database's
  mysql_db: name={{ item.name }} state=present
  with_items:
  - "{{ mysql_db }}"
  when: mysql_db|lower() != 'none'

- name: Create the database users
  mysql_user: name={{ item.name }}  password={{ item.pass|default("foobar") }}
    priv={{ item.priv|default("*.*:ALL") }} state=present host={{ item.host | default("localhost") }}
  with_items:
  - "{{ mysql_users }}"
  when: mysql_users|lower() != 'none'

- name: Create the replication users
  mysql_user: name={{ item.name }}  host="%" password={{ item.pass|default("foobar") }}
    priv="*.*:REPLICATION SLAVE" state=present
  with_items:
  - "{{ mysql_repl_user }}"
  when: mysql_repl_role == 'master'